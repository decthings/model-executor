// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod decthings {
    #[allow(dead_code)]
    pub mod model {
        #[allow(dead_code, clippy::all)]
        pub mod model_callbacks {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct DataLoader {
                handle: _rt::Resource<DataLoader>,
            }

            impl DataLoader {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for DataLoader {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "decthings:model/model-callbacks@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]data-loader"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct StateProvider {
                handle: _rt::Resource<StateProvider>,
            }

            impl StateProvider {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for StateProvider {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "decthings:model/model-callbacks@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]state-provider"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct StateLoader {
                handle: _rt::Resource<StateLoader>,
            }

            impl StateLoader {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for StateLoader {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "decthings:model/model-callbacks@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]state-loader"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct TrainTracker {
                handle: _rt::Resource<TrainTracker>,
            }

            impl TrainTracker {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for TrainTracker {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "decthings:model/model-callbacks@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]train-tracker"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl DataLoader {
                #[allow(unused_unsafe, clippy::all)]
                pub fn read(&self, start_index: u32, amount: u32) -> _rt::Vec<_rt::Vec<u8>> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "decthings:model/model-callbacks@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]data-loader.read"]
                            fn wit_import(_: i32, _: i32, _: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: i32, _: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            _rt::as_i32(&start_index),
                            _rt::as_i32(&amount),
                            ptr0,
                        );
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base6 = l1;
                        let len6 = l2;
                        let mut result6 = _rt::Vec::with_capacity(len6);
                        for i in 0..len6 {
                            let base = base6.add(i * 8);
                            let e6 = {
                                let l3 = *base.add(0).cast::<*mut u8>();
                                let l4 = *base.add(4).cast::<usize>();
                                let len5 = l4;

                                _rt::Vec::from_raw_parts(l3.cast(), len5, len5)
                            };
                            result6.push(e6);
                        }
                        _rt::cabi_dealloc(base6, len6 * 8, 4);
                        result6
                    }
                }
            }
            impl DataLoader {
                #[allow(unused_unsafe, clippy::all)]
                pub fn shuffle(&self, others: &[&DataLoader]) {
                    unsafe {
                        let vec0 = others;
                        let len0 = vec0.len();
                        let layout0 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec0.len() * 4, 4);
                        let result0 = if layout0.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout0);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec0.into_iter().enumerate() {
                            let base = result0.add(i * 4);
                            {
                                *base.add(0).cast::<i32>() = (e).handle() as i32;
                            }
                        }

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "decthings:model/model-callbacks@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]data-loader.shuffle"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result0, len0);
                        if layout0.size() != 0 {
                            _rt::alloc::dealloc(result0.cast(), layout0);
                        }
                    }
                }
            }
            impl StateProvider {
                #[allow(unused_unsafe, clippy::all)]
                pub fn provide(&self, data: &[(_rt::String, _rt::Vec<u8>)]) {
                    unsafe {
                        let vec3 = data;
                        let len3 = vec3.len();
                        let layout3 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec3.len() * 16, 4);
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3.add(i * 16);
                            {
                                let (t0_0, t0_1) = e;
                                let vec1 = t0_0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(4).cast::<usize>() = len1;
                                *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                                let vec2 = t0_1;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(12).cast::<usize>() = len2;
                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                            }
                        }

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "decthings:model/model-callbacks@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]state-provider.provide"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result3, len3);
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                    }
                }
            }
            impl StateLoader {
                #[allow(unused_unsafe, clippy::all)]
                pub fn read(&self) -> _rt::Vec<u8> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "decthings:model/model-callbacks@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]state-loader.read"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        _rt::Vec::from_raw_parts(l1.cast(), len3, len3)
                    }
                }
            }
            impl TrainTracker {
                #[allow(unused_unsafe, clippy::all)]
                pub fn is_cancelled(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "decthings:model/model-callbacks@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]train-tracker.is-cancelled"]
                            fn wit_import(_: i32) -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import((self).handle() as i32);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl TrainTracker {
                #[allow(unused_unsafe, clippy::all)]
                pub fn progress(&self, progress: f32) {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "decthings:model/model-callbacks@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]train-tracker.progress"]
                            fn wit_import(_: i32, _: f32);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: f32) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, _rt::as_f32(&progress));
                    }
                }
            }
            impl TrainTracker {
                #[allow(unused_unsafe, clippy::all)]
                pub fn metrics(&self, metrics: &[(_rt::String, _rt::Vec<u8>)]) {
                    unsafe {
                        let vec3 = metrics;
                        let len3 = vec3.len();
                        let layout3 =
                            _rt::alloc::Layout::from_size_align_unchecked(vec3.len() * 16, 4);
                        let result3 = if layout3.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout3);
                            }
                            ptr
                        } else {
                            {
                                ::core::ptr::null_mut()
                            }
                        };
                        for (i, e) in vec3.into_iter().enumerate() {
                            let base = result3.add(i * 16);
                            {
                                let (t0_0, t0_1) = e;
                                let vec1 = t0_0;
                                let ptr1 = vec1.as_ptr().cast::<u8>();
                                let len1 = vec1.len();
                                *base.add(4).cast::<usize>() = len1;
                                *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                                let vec2 = t0_1;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();
                                *base.add(12).cast::<usize>() = len2;
                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                            }
                        }

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "decthings:model/model-callbacks@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]train-tracker.metrics"]
                            fn wit_import(_: i32, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, result3, len3);
                        if layout3.size() != 0 {
                            _rt::alloc::dealloc(result3.cast(), layout3);
                        }
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod decthings {
        #[allow(dead_code)]
        pub mod model {
            #[allow(dead_code, clippy::all)]
            pub mod model {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type DataLoader =
                    super::super::super::super::decthings::model::model_callbacks::DataLoader;
                pub type StateProvider =
                    super::super::super::super::decthings::model::model_callbacks::StateProvider;
                pub type StateLoader =
                    super::super::super::super::decthings::model::model_callbacks::StateLoader;
                pub type TrainTracker =
                    super::super::super::super::decthings::model::model_callbacks::TrainTracker;
                pub struct Param {
                    pub name: _rt::String,
                    pub amount: u32,
                    pub total_byte_size: u64,
                    pub data_loader: DataLoader,
                }
                impl ::core::fmt::Debug for Param {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Param")
                            .field("name", &self.name)
                            .field("amount", &self.amount)
                            .field("total-byte-size", &self.total_byte_size)
                            .field("data-loader", &self.data_loader)
                            .finish()
                    }
                }
                pub struct StateKey {
                    pub key: _rt::String,
                    pub byte_size: u64,
                    pub state_loader: StateLoader,
                }
                impl ::core::fmt::Debug for StateKey {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("StateKey")
                            .field("key", &self.key)
                            .field("byte-size", &self.byte_size)
                            .field("state-loader", &self.state_loader)
                            .finish()
                    }
                }
                pub struct OtherModelWithState {
                    pub model_id: _rt::String,
                    pub mount_path: _rt::String,
                    pub state: _rt::Vec<StateKey>,
                }
                impl ::core::fmt::Debug for OtherModelWithState {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("OtherModelWithState")
                            .field("model-id", &self.model_id)
                            .field("mount-path", &self.mount_path)
                            .field("state", &self.state)
                            .finish()
                    }
                }
                pub struct CreateModelStateOptions {
                    pub params: _rt::Vec<Param>,
                    pub state_provider: StateProvider,
                    pub other_models: _rt::Vec<OtherModelWithState>,
                }
                impl ::core::fmt::Debug for CreateModelStateOptions {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("CreateModelStateOptions")
                            .field("params", &self.params)
                            .field("state-provider", &self.state_provider)
                            .field("other-models", &self.other_models)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct OtherModel {
                    pub model_id: _rt::String,
                    pub mount_path: _rt::String,
                }
                impl ::core::fmt::Debug for OtherModel {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("OtherModel")
                            .field("model-id", &self.model_id)
                            .field("mount-path", &self.mount_path)
                            .finish()
                    }
                }
                pub struct InstantiateModelOptions {
                    pub state: _rt::Vec<StateKey>,
                    pub other_models: _rt::Vec<OtherModel>,
                }
                impl ::core::fmt::Debug for InstantiateModelOptions {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("InstantiateModelOptions")
                            .field("state", &self.state)
                            .field("other-models", &self.other_models)
                            .finish()
                    }
                }
                pub struct EvaluateOptions {
                    pub params: _rt::Vec<Param>,
                }
                impl ::core::fmt::Debug for EvaluateOptions {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("EvaluateOptions")
                            .field("params", &self.params)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct EvaluateOutput {
                    pub name: _rt::String,
                    pub data: _rt::Vec<_rt::Vec<u8>>,
                }
                impl ::core::fmt::Debug for EvaluateOutput {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("EvaluateOutput")
                            .field("name", &self.name)
                            .field("data", &self.data)
                            .finish()
                    }
                }
                pub struct TrainOptions {
                    pub params: _rt::Vec<Param>,
                    pub tracker: TrainTracker,
                }
                impl ::core::fmt::Debug for TrainOptions {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("TrainOptions")
                            .field("params", &self.params)
                            .field("tracker", &self.tracker)
                            .finish()
                    }
                }
                pub struct GetModelStateOptions {
                    pub state_provider: StateProvider,
                }
                impl ::core::fmt::Debug for GetModelStateOptions {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("GetModelStateOptions")
                            .field("state-provider", &self.state_provider)
                            .finish()
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Instantiated {
                    handle: _rt::Resource<Instantiated>,
                }

                type _InstantiatedRep<T> = Option<T>;

                impl Instantiated {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Instantiated`.
                    pub fn new<T: GuestInstantiated>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _InstantiatedRep<T> = Some(val);
                        let ptr: *mut _InstantiatedRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestInstantiated>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestInstantiated>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestInstantiated>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestInstantiated` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _InstantiatedRep<T>);
                    }

                    fn as_ptr<T: GuestInstantiated>(&self) -> *mut _InstantiatedRep<T> {
                        Instantiated::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Instantiated`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct InstantiatedBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Instantiated>,
                }

                impl<'a> InstantiatedBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestInstantiated>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _InstantiatedRep<T> {
                        Instantiated::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Instantiated {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]decthings:model/model@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]instantiated"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_create_model_state_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let base6 = arg0;
                    let len6 = arg1;
                    let mut result6 = _rt::Vec::with_capacity(len6);
                    for i in 0..len6 {
                        let base = base6.add(i * 32);
                        let e6 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = *base.add(8).cast::<i32>();
                            let l4 = *base.add(16).cast::<i64>();
                            let l5 = *base.add(24).cast::<i32>();

                            Param{
              name: _rt::string_lift(bytes2),
              amount: l3 as u32,
              total_byte_size: l4 as u64,
              data_loader: super::super::super::super::decthings::model::model_callbacks::DataLoader::from_handle(l5 as u32),
            }
                        };
                        result6.push(e6);
                    }
                    _rt::cabi_dealloc(base6, len6 * 32, 8);
                    let base21 = arg3;
                    let len21 = arg4;
                    let mut result21 = _rt::Vec::with_capacity(len21);
                    for i in 0..len21 {
                        let base = base21.add(i * 24);
                        let e21 = {
                            let l7 = *base.add(0).cast::<*mut u8>();
                            let l8 = *base.add(4).cast::<usize>();
                            let len9 = l8;
                            let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                            let l10 = *base.add(8).cast::<*mut u8>();
                            let l11 = *base.add(12).cast::<usize>();
                            let len12 = l11;
                            let bytes12 = _rt::Vec::from_raw_parts(l10.cast(), len12, len12);
                            let l13 = *base.add(16).cast::<*mut u8>();
                            let l14 = *base.add(20).cast::<usize>();
                            let base20 = l13;
                            let len20 = l14;
                            let mut result20 = _rt::Vec::with_capacity(len20);
                            for i in 0..len20 {
                                let base = base20.add(i * 24);
                                let e20 = {
                                    let l15 = *base.add(0).cast::<*mut u8>();
                                    let l16 = *base.add(4).cast::<usize>();
                                    let len17 = l16;
                                    let bytes17 =
                                        _rt::Vec::from_raw_parts(l15.cast(), len17, len17);
                                    let l18 = *base.add(8).cast::<i64>();
                                    let l19 = *base.add(16).cast::<i32>();

                                    StateKey{
                  key: _rt::string_lift(bytes17),
                  byte_size: l18 as u64,
                  state_loader: super::super::super::super::decthings::model::model_callbacks::StateLoader::from_handle(l19 as u32),
                }
                                };
                                result20.push(e20);
                            }
                            _rt::cabi_dealloc(base20, len20 * 24, 8);

                            OtherModelWithState {
                                model_id: _rt::string_lift(bytes9),
                                mount_path: _rt::string_lift(bytes12),
                                state: result20,
                            }
                        };
                        result21.push(e21);
                    }
                    _rt::cabi_dealloc(base21, len21 * 24, 4);
                    let result22 = T::create_model_state(CreateModelStateOptions{
          params: result6,
          state_provider: super::super::super::super::decthings::model::model_callbacks::StateProvider::from_handle(arg2 as u32),
          other_models: result21,
        });
                    let ptr23 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result22 {
                        Ok(_) => {
                            *ptr23.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr23.add(0).cast::<u8>() = (1i32) as u8;
                            let vec24 = (e.into_bytes()).into_boxed_slice();
                            let ptr24 = vec24.as_ptr().cast::<u8>();
                            let len24 = vec24.len();
                            ::core::mem::forget(vec24);
                            *ptr23.add(8).cast::<usize>() = len24;
                            *ptr23.add(4).cast::<*mut u8>() = ptr24.cast_mut();
                        }
                    };
                    ptr23
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_create_model_state<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_instantiated_evaluate_cabi<T: GuestInstantiated>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let base6 = arg1;
                    let len6 = arg2;
                    let mut result6 = _rt::Vec::with_capacity(len6);
                    for i in 0..len6 {
                        let base = base6.add(i * 32);
                        let e6 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = *base.add(8).cast::<i32>();
                            let l4 = *base.add(16).cast::<i64>();
                            let l5 = *base.add(24).cast::<i32>();

                            Param{
            name: _rt::string_lift(bytes2),
            amount: l3 as u32,
            total_byte_size: l4 as u64,
            data_loader: super::super::super::super::decthings::model::model_callbacks::DataLoader::from_handle(l5 as u32),
          }
                        };
                        result6.push(e6);
                    }
                    _rt::cabi_dealloc(base6, len6 * 32, 8);
                    let result7 = T::evaluate(
                        InstantiatedBorrow::lift(arg0 as u32 as usize).get(),
                        EvaluateOptions { params: result6 },
                    );
                    let ptr8 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result7 {
                        Ok(e) => {
                            *ptr8.add(0).cast::<u8>() = (0i32) as u8;
                            let vec13 = e;
                            let len13 = vec13.len();
                            let layout13 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec13.len() * 16, 4);
                            let result13 = if layout13.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout13);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec13.into_iter().enumerate() {
                                let base = result13.add(i * 16);
                                {
                                    let EvaluateOutput {
                                        name: name9,
                                        data: data9,
                                    } = e;
                                    let vec10 = (name9.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *base.add(4).cast::<usize>() = len10;
                                    *base.add(0).cast::<*mut u8>() = ptr10.cast_mut();
                                    let vec12 = data9;
                                    let len12 = vec12.len();
                                    let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec12.len() * 8,
                                        4,
                                    );
                                    let result12 = if layout12.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout12);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec12.into_iter().enumerate() {
                                        let base = result12.add(i * 8);
                                        {
                                            let vec11 = (e).into_boxed_slice();
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            ::core::mem::forget(vec11);
                                            *base.add(4).cast::<usize>() = len11;
                                            *base.add(0).cast::<*mut u8>() = ptr11.cast_mut();
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len12;
                                    *base.add(8).cast::<*mut u8>() = result12;
                                }
                            }
                            *ptr8.add(8).cast::<usize>() = len13;
                            *ptr8.add(4).cast::<*mut u8>() = result13;
                        }
                        Err(e) => {
                            *ptr8.add(0).cast::<u8>() = (1i32) as u8;
                            let vec14 = (e.into_bytes()).into_boxed_slice();
                            let ptr14 = vec14.as_ptr().cast::<u8>();
                            let len14 = vec14.len();
                            ::core::mem::forget(vec14);
                            *ptr8.add(8).cast::<usize>() = len14;
                            *ptr8.add(4).cast::<*mut u8>() = ptr14.cast_mut();
                        }
                    };
                    ptr8
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_instantiated_evaluate<T: GuestInstantiated>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l9 = *arg0.add(4).cast::<*mut u8>();
                            let l10 = *arg0.add(8).cast::<usize>();
                            let base11 = l9;
                            let len11 = l10;
                            for i in 0..len11 {
                                let base = base11.add(i * 16);
                                {
                                    let l1 = *base.add(0).cast::<*mut u8>();
                                    let l2 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l1, l2, 1);
                                    let l6 = *base.add(8).cast::<*mut u8>();
                                    let l7 = *base.add(12).cast::<usize>();
                                    let base8 = l6;
                                    let len8 = l7;
                                    for i in 0..len8 {
                                        let base = base8.add(i * 8);
                                        {
                                            let l3 = *base.add(0).cast::<*mut u8>();
                                            let l4 = *base.add(4).cast::<usize>();
                                            let base5 = l3;
                                            let len5 = l4;
                                            _rt::cabi_dealloc(base5, len5 * 1, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(base8, len8 * 8, 4);
                                }
                            }
                            _rt::cabi_dealloc(base11, len11 * 16, 4);
                        }
                        _ => {
                            let l12 = *arg0.add(4).cast::<*mut u8>();
                            let l13 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l12, l13, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_instantiated_train_cabi<T: GuestInstantiated>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let base6 = arg1;
                    let len6 = arg2;
                    let mut result6 = _rt::Vec::with_capacity(len6);
                    for i in 0..len6 {
                        let base = base6.add(i * 32);
                        let e6 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = *base.add(8).cast::<i32>();
                            let l4 = *base.add(16).cast::<i64>();
                            let l5 = *base.add(24).cast::<i32>();

                            Param{
          name: _rt::string_lift(bytes2),
          amount: l3 as u32,
          total_byte_size: l4 as u64,
          data_loader: super::super::super::super::decthings::model::model_callbacks::DataLoader::from_handle(l5 as u32),
        }
                        };
                        result6.push(e6);
                    }
                    _rt::cabi_dealloc(base6, len6 * 32, 8);
                    let result7 = T::train(InstantiatedBorrow::lift(arg0 as u32 as usize).get(), TrainOptions{
      params: result6,
      tracker: super::super::super::super::decthings::model::model_callbacks::TrainTracker::from_handle(arg3 as u32),
    });
                    let ptr8 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result7 {
                        Ok(_) => {
                            *ptr8.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr8.add(0).cast::<u8>() = (1i32) as u8;
                            let vec9 = (e.into_bytes()).into_boxed_slice();
                            let ptr9 = vec9.as_ptr().cast::<u8>();
                            let len9 = vec9.len();
                            ::core::mem::forget(vec9);
                            *ptr8.add(8).cast::<usize>() = len9;
                            *ptr8.add(4).cast::<*mut u8>() = ptr9.cast_mut();
                        }
                    };
                    ptr8
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_instantiated_train<T: GuestInstantiated>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_instantiated_get_model_state_cabi<
                    T: GuestInstantiated,
                >(
                    arg0: *mut u8,
                    arg1: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::get_model_state(InstantiatedBorrow::lift(arg0 as u32 as usize).get(), GetModelStateOptions{
    state_provider: super::super::super::super::decthings::model::model_callbacks::StateProvider::from_handle(arg1 as u32),
  });
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *ptr1.add(8).cast::<usize>() = len2;
                            *ptr1.add(4).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_instantiated_get_model_state<
                    T: GuestInstantiated,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_instantiate_model_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let base5 = arg0;
                    let len5 = arg1;
                    let mut result5 = _rt::Vec::with_capacity(len5);
                    for i in 0..len5 {
                        let base = base5.add(i * 24);
                        let e5 = {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            let len2 = l1;
                            let bytes2 = _rt::Vec::from_raw_parts(l0.cast(), len2, len2);
                            let l3 = *base.add(8).cast::<i64>();
                            let l4 = *base.add(16).cast::<i32>();

                            StateKey{
      key: _rt::string_lift(bytes2),
      byte_size: l3 as u64,
      state_loader: super::super::super::super::decthings::model::model_callbacks::StateLoader::from_handle(l4 as u32),
    }
                        };
                        result5.push(e5);
                    }
                    _rt::cabi_dealloc(base5, len5 * 24, 8);
                    let base12 = arg2;
                    let len12 = arg3;
                    let mut result12 = _rt::Vec::with_capacity(len12);
                    for i in 0..len12 {
                        let base = base12.add(i * 16);
                        let e12 = {
                            let l6 = *base.add(0).cast::<*mut u8>();
                            let l7 = *base.add(4).cast::<usize>();
                            let len8 = l7;
                            let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);
                            let l9 = *base.add(8).cast::<*mut u8>();
                            let l10 = *base.add(12).cast::<usize>();
                            let len11 = l10;
                            let bytes11 = _rt::Vec::from_raw_parts(l9.cast(), len11, len11);

                            OtherModel {
                                model_id: _rt::string_lift(bytes8),
                                mount_path: _rt::string_lift(bytes11),
                            }
                        };
                        result12.push(e12);
                    }
                    _rt::cabi_dealloc(base12, len12 * 16, 4);
                    let result13 = T::instantiate_model(InstantiateModelOptions {
                        state: result5,
                        other_models: result12,
                    });
                    let ptr14 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result13 {
                        Ok(e) => {
                            *ptr14.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr14.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr14.add(0).cast::<u8>() = (1i32) as u8;
                            let vec15 = (e.into_bytes()).into_boxed_slice();
                            let ptr15 = vec15.as_ptr().cast::<u8>();
                            let len15 = vec15.len();
                            ::core::mem::forget(vec15);
                            *ptr14.add(8).cast::<usize>() = len15;
                            *ptr14.add(4).cast::<*mut u8>() = ptr15.cast_mut();
                        }
                    };
                    ptr14
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_instantiate_model<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                pub trait Guest {
                    type Instantiated: GuestInstantiated;
                    fn create_model_state(
                        options: CreateModelStateOptions,
                    ) -> Result<(), _rt::String>;
                    fn instantiate_model(
                        options: InstantiateModelOptions,
                    ) -> Result<Instantiated, _rt::String>;
                }
                pub trait GuestInstantiated: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]decthings:model/model@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-new]instantiated"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]decthings:model/model@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]instantiated"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn evaluate(
                        &self,
                        options: EvaluateOptions,
                    ) -> Result<_rt::Vec<EvaluateOutput>, _rt::String>;
                    fn train(&self, options: TrainOptions) -> Result<(), _rt::String>;
                    fn get_model_state(
                        &self,
                        options: GetModelStateOptions,
                    ) -> Result<(), _rt::String>;
                }
                #[doc(hidden)]

                macro_rules! __export_decthings_model_model_0_1_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "decthings:model/model@0.1.0#create-model-state"]
    unsafe extern "C" fn export_create_model_state(arg0: *mut u8,arg1: usize,arg2: i32,arg3: *mut u8,arg4: usize,) -> *mut u8 {
      $($path_to_types)*::_export_create_model_state_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4)
    }
    #[export_name = "cabi_post_decthings:model/model@0.1.0#create-model-state"]
    unsafe extern "C" fn _post_return_create_model_state(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_create_model_state::<$ty>(arg0)
    }
    #[export_name = "decthings:model/model@0.1.0#[method]instantiated.evaluate"]
    unsafe extern "C" fn export_method_instantiated_evaluate(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      $($path_to_types)*::_export_method_instantiated_evaluate_cabi::<<$ty as $($path_to_types)*::Guest>::Instantiated>(arg0, arg1, arg2)
    }
    #[export_name = "cabi_post_decthings:model/model@0.1.0#[method]instantiated.evaluate"]
    unsafe extern "C" fn _post_return_method_instantiated_evaluate(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_instantiated_evaluate::<<$ty as $($path_to_types)*::Guest>::Instantiated>(arg0)
    }
    #[export_name = "decthings:model/model@0.1.0#[method]instantiated.train"]
    unsafe extern "C" fn export_method_instantiated_train(arg0: *mut u8,arg1: *mut u8,arg2: usize,arg3: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_instantiated_train_cabi::<<$ty as $($path_to_types)*::Guest>::Instantiated>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_decthings:model/model@0.1.0#[method]instantiated.train"]
    unsafe extern "C" fn _post_return_method_instantiated_train(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_instantiated_train::<<$ty as $($path_to_types)*::Guest>::Instantiated>(arg0)
    }
    #[export_name = "decthings:model/model@0.1.0#[method]instantiated.get-model-state"]
    unsafe extern "C" fn export_method_instantiated_get_model_state(arg0: *mut u8,arg1: i32,) -> *mut u8 {
      $($path_to_types)*::_export_method_instantiated_get_model_state_cabi::<<$ty as $($path_to_types)*::Guest>::Instantiated>(arg0, arg1)
    }
    #[export_name = "cabi_post_decthings:model/model@0.1.0#[method]instantiated.get-model-state"]
    unsafe extern "C" fn _post_return_method_instantiated_get_model_state(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_instantiated_get_model_state::<<$ty as $($path_to_types)*::Guest>::Instantiated>(arg0)
    }
    #[export_name = "decthings:model/model@0.1.0#instantiate-model"]
    unsafe extern "C" fn export_instantiate_model(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_instantiate_model_cabi::<$ty>(arg0, arg1, arg2, arg3)
    }
    #[export_name = "cabi_post_decthings:model/model@0.1.0#instantiate-model"]
    unsafe extern "C" fn _post_return_instantiate_model(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_instantiate_model::<$ty>(arg0)
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "decthings:model/model@0.1.0#[dtor]instantiated"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::Instantiated::dtor::<
        <$ty as $($path_to_types)*::Guest>::Instantiated
        >(rep)
      }
    };

  };);
}
                #[doc(hidden)]
                pub(crate) use __export_decthings_model_model_0_1_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            }
        }
    }
}
mod _rt {

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::vec::Vec;

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub use alloc_crate::alloc;
    pub use alloc_crate::string::String;
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub use alloc_crate::boxed::Box;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_model_runner_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::decthings::model::model::__export_decthings_model_model_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::decthings::model::model);
  )
}
#[doc(inline)]
pub(crate) use __export_model_runner_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:model-runner:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1688] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x95\x0c\x01A\x02\x01\
A\x08\x01B\x1b\x04\0\x0bdata-loader\x03\x01\x04\0\x0estate-provider\x03\x01\x04\0\
\x0cstate-loader\x03\x01\x04\0\x0dtrain-tracker\x03\x01\x01h\0\x01p}\x01p\x05\x01\
@\x03\x04self\x04\x0bstart-indexy\x06amounty\0\x06\x04\0\x18[method]data-loader.\
read\x01\x07\x01p\x04\x01@\x02\x04self\x04\x06others\x08\x01\0\x04\0\x1b[method]\
data-loader.shuffle\x01\x09\x01h\x01\x01o\x02s\x05\x01p\x0b\x01@\x02\x04self\x0a\
\x04data\x0c\x01\0\x04\0\x1e[method]state-provider.provide\x01\x0d\x01h\x02\x01@\
\x01\x04self\x0e\0\x05\x04\0\x19[method]state-loader.read\x01\x0f\x01h\x03\x01@\x01\
\x04self\x10\0\x7f\x04\0\"[method]train-tracker.is-cancelled\x01\x11\x01@\x02\x04\
self\x10\x08progressv\x01\0\x04\0\x1e[method]train-tracker.progress\x01\x12\x01@\
\x02\x04self\x10\x07metrics\x0c\x01\0\x04\0\x1d[method]train-tracker.metrics\x01\
\x13\x03\x01%decthings:model/model-callbacks@0.1.0\x05\0\x02\x03\0\0\x0bdata-loa\
der\x02\x03\0\0\x0estate-provider\x02\x03\0\0\x0cstate-loader\x02\x03\0\0\x0dtra\
in-tracker\x01B7\x02\x03\x02\x01\x01\x04\0\x0bdata-loader\x03\0\0\x02\x03\x02\x01\
\x02\x04\0\x0estate-provider\x03\0\x02\x02\x03\x02\x01\x03\x04\0\x0cstate-loader\
\x03\0\x04\x02\x03\x02\x01\x04\x04\0\x0dtrain-tracker\x03\0\x06\x01i\x01\x01r\x04\
\x04names\x06amounty\x0ftotal-byte-sizew\x0bdata-loader\x08\x04\0\x05param\x03\0\
\x09\x01i\x05\x01r\x03\x03keys\x09byte-sizew\x0cstate-loader\x0b\x04\0\x09state-\
key\x03\0\x0c\x01p\x0d\x01r\x03\x08model-ids\x0amount-paths\x05state\x0e\x04\0\x16\
other-model-with-state\x03\0\x0f\x01p\x0a\x01i\x03\x01p\x10\x01r\x03\x06params\x11\
\x0estate-provider\x12\x0cother-models\x13\x04\0\x1acreate-model-state-options\x03\
\0\x14\x01r\x02\x08model-ids\x0amount-paths\x04\0\x0bother-model\x03\0\x16\x01p\x17\
\x01r\x02\x05state\x0e\x0cother-models\x18\x04\0\x19instantiate-model-options\x03\
\0\x19\x01r\x01\x06params\x11\x04\0\x10evaluate-options\x03\0\x1b\x01p}\x01p\x1d\
\x01r\x02\x04names\x04data\x1e\x04\0\x0fevaluate-output\x03\0\x1f\x01i\x07\x01r\x02\
\x06params\x11\x07tracker!\x04\0\x0dtrain-options\x03\0\"\x01r\x01\x0estate-prov\
ider\x12\x04\0\x17get-model-state-options\x03\0$\x04\0\x0cinstantiated\x03\x01\x01\
h&\x01p\x20\x01j\x01(\x01s\x01@\x02\x04self'\x07options\x1c\0)\x04\0\x1d[method]\
instantiated.evaluate\x01*\x01j\0\x01s\x01@\x02\x04self'\x07options#\0+\x04\0\x1a\
[method]instantiated.train\x01,\x01@\x02\x04self'\x07options%\0+\x04\0$[method]i\
nstantiated.get-model-state\x01-\x01@\x01\x07options\x15\0+\x04\0\x12create-mode\
l-state\x01.\x01i&\x01j\x01/\x01s\x01@\x01\x07options\x1a\00\x04\0\x11instantiat\
e-model\x011\x04\x01\x1bdecthings:model/model@0.1.0\x05\x05\x04\x01\"decthings:m\
odel/model-runner@0.1.0\x04\0\x0b\x12\x01\0\x0cmodel-runner\x03\0\0\0G\x09produc\
ers\x01\x0cprocessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x060\
.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
